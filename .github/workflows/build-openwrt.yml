#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
      
    - name: Generate configuration file
      run: |
        rm -f ./.config*
        touch ./.config
        #
        # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
        # 例如:
        cat >> .config <<EOF
        CONFIG_DEFAULT_luci-app-ssr-plus=y
        CONFIG_DEFAULT_luci-app-ttyd=y
        CONFIG_DEFAULT_luci-app-turboacc=y
        CONFIG_DEFAULT_luci-app-unblockmusic=y
        CONFIG_DEFAULT_luci-app-upnp=y
        CONFIG_DEFAULT_luci-app-vlmcsd=y
        CONFIG_DEFAULT_luci-app-vsftpd=y
        CONFIG_DEFAULT_luci-app-wireguard=y
        CONFIG_DEFAULT_luci-app-wol=y
        CONFIG_DEFAULT_luci-app-xlnetacc=y
        CONFIG_DEFAULT_luci-app-zerotier=y
        
        CONFIG_PACKAGE_luci-app-autoreboot=y
        CONFIG_PACKAGE_luci-app-frpc=y
        CONFIG_PACKAGE_luci-app-frps=y
        CONFIG_PACKAGE_luci-app-baidupcs-web=y
        
        CONFIG_PACKAGE_luci-app-ipsec-vpnd=y
        CONFIG_PACKAGE_luci-app-jd-dailybonus=y
        CONFIG_PACKAGE_luci-app-netdata=y
        CONFIG_PACKAGE_luci-app-nlbwmon=y
        CONFIG_PACKAGE_luci-app-uhttpd=y
        CONFIG_PACKAGE_luci-app-unblockmusic=y
        CONFIG_PACKAGE_luci-app-unblockmusic_INCLUDE_UnblockNeteaseMusic_Go=y
        
        CONFIG_PACKAGE_luci-app-airplay2=y
        CONFIG_PACKAGE_luci-app-aliyundrive-webdav=y
        CONFIG_PACKAGE_luci-app-amule=y
        CONFIG_PACKAGE_luci-app-aria2=y
        CONFIG_PACKAGE_luci-app-arpbind=y
        
        CONFIG_PACKAGE_luci-app-ssr-plus=y
        # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun is not set
        # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy is not set
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_IPT2Socks=y
        # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2 is not set
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Server=y
        # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Client is not set
        # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Server is not set
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Server=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_Obfs=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_Plugin=y
        CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
        
        CONFIG_PACKAGE_luci-app-turboacc=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_SHORTCUT_FE=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_BBR_CCA=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_DNSFORWARDER=y
        CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_DNSPROXY=y
        
        CONFIG_PACKAGE_luci-app-wol=y
        CONFIG_PACKAGE_luci-app-wrtbwmon=y
        CONFIG_PACKAGE_luci-app-xlnetacc=y
        #
        # 4. Themes
        #
        CONFIG_PACKAGE_luci-theme-argon=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-theme-infinityfreedom=y
        CONFIG_PACKAGE_luci-theme-material=y
        CONFIG_PACKAGE_luci-theme-netgear=y
        # end of 4. Themes
        EOF
        #
        # ===============================================================
        # 
        sed -i 's/^[ \t]*//g' ./.config
        # make defconfig

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
